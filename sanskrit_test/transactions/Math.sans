module Math {

    public transactional fun Add(a:IntU8.U8,b:IntU8.U8):(c:IntU8.U8) {
        c = call IntU8.add(a,b);
        return c;
    };

    public transactional fun Add2(a:IntI128.I128,b:IntI128.I128):(c:IntI128.I128) {
        c = call IntI128.add(a,b);
        return c;
    };

    public fun ErrorAdd(a:IntU8.U8,b:IntU8.U8):(r:Bool.Bool) {
        return try call IntU8.add(!a,!b){
            success(c) => {
                return pack Bool.Bool#False();
            };
            failure => {
                return pack Bool.Bool#True();
            };
        };
    };

    public transactional fun Sub(a:IntU8.U8,b:IntU8.U8):(c:IntU8.U8) {
        c = call IntU8.sub(a,b);
        return c;
    };

    public transactional fun Sub2(a:IntI128.I128,b:IntI128.I128):(c:IntI128.I128) {
        c = call IntI128.sub(a,b);
        return c;
    };

    public fun ErrorSub(a:IntU8.U8,b:IntU8.U8):(r:Bool.Bool) {
        return try call IntU8.sub(!a,!b){
            success(c) => {
                return pack Bool.Bool#False();
            };
            failure => {
                return pack Bool.Bool#True();
            };
        };
    };

    public transactional fun Mul(a:IntU8.U8,b:IntU8.U8):(c:IntU8.U8) {
        c = call IntU8.mul(a,b);
        return c;
    };

    public transactional fun Mul2(a:IntI128.I128,b:IntI128.I128):(c:IntI128.I128) {
        c = call IntI128.mul(a,b);
        return c;
    };

    public fun ErrorMul(a:IntU8.U8,b:IntU8.U8):(r:Bool.Bool) {
        return try call IntU8.mul(!a,!b){
            success(c) => {
                return pack Bool.Bool#False();
            };
            failure => {
                return pack Bool.Bool#True();
            };
        };
    };

    public transactional fun Div(a:IntU8.U8,b:IntU8.U8):(c:IntU8.U8) {
        c = call IntU8.div(a,b);
        return c;
    };

    public transactional fun Div2(a:IntI128.I128,b:IntI128.I128):(c:IntI128.I128) {
        c = call IntI128.div(a,b);
        return c;
    };

    public fun ErrorDiv(a:IntU8.U8,b:IntU8.U8):(r:Bool.Bool) {
        return try call IntU8.div(!a,!b){
            success(c) => {
                return pack Bool.Bool#False();
            };
            failure => {
                return pack Bool.Bool#True();
            };
        };
    };

    public fun ErrorDiv2(a:IntI8.I8,b:IntI8.I8):(r:Bool.Bool) {
        return try call IntI8.div(!a,!b){
            success(c) => {
                return pack Bool.Bool#False();
            };
            failure => {
                return pack Bool.Bool#True();
            };
        };
    };
}