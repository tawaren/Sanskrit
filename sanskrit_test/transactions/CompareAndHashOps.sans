module CompareAndHashOps {
    public fun EqU8(a:IntU8.U8, b:IntU8.U8):(c:$bool) {
        c = call IntU8.eq(a,b);
        return c;
    };

    public fun EqI128(a:IntI128.I128, b:IntI128.I128):(c:$bool) {
        c = call IntI128.eq(a,b);
        return c;
    };

    public fun HashData20(a:Data.Data20):(c:Data.Data20) {
        c = call Data.Hash20(a);
        return c;
    };

    public fun HashU8(a:IntU8.U8):(c:Data.Data20) {
        c = call IntU8.Hash(a);
        return c;
    };

    public fun PlainHash(a:Data.Data12):(c:Data.Data20) {
        c = call Data.Hash12(a);
        return c;
    };

    public fun ToData(a:IntU8.U8):(c:Data.Data1) {
        c = call IntU8.ToData(a);
        return c;
    };

    public fun ToData2(a:IntU32.U32):(c:Data.Data4) {
        c = call IntU32.ToData(a);
        return c;
    };

    public fun Lt(a:IntU8.U8, b:IntU8.U8):(c:$bool) {
        c = call IntU8.lt(a,b);
        return c;
    };

    public fun Lt2(a:IntI128.I128, b:IntI128.I128):(c:$bool) {
        c = call IntI128.lt(a,b);
        return c;
    };

    public fun Gt(a:IntU8.U8, b:IntU8.U8):(c:$bool) {
        c = call IntU8.gt(a,b);
        return c;
    };

    public fun Gt2(a:IntI128.I128, b:IntI128.I128):(c:$bool) {
        c = call IntI128.gt(a,b);
        return c;
    };

    public fun Lte(a:IntU8.U8, b:IntU8.U8):(c:$bool) {
        c = call IntU8.lte(a,b);
        return c;
    };

    public fun Lte2(a:IntI128.I128, b:IntI128.I128):(c:$bool) {
        c = call IntI128.lte(a,b);
        return c;
    };

    public fun Gte(a:IntU8.U8, b:IntU8.U8):(c:$bool) {
        c = call IntU8.gte(a,b);
        return c;
    };

    public fun Gte2(a:IntI128.I128, b:IntI128.I128):(c:$bool) {
        c = call IntI128.gte(a,b);
        return c;
    };
}