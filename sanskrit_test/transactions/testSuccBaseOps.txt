
transaction{
   a = lit 1:IntU8.U8;
   b = pack SomeTypes.X[IntU8.U8]#Ctr(a);
   c = unpack b:SomeTypes.X[IntU8.U8];
   return;
};

transaction{
   a = lit 1:IntU8.U8;
   b = copy a;
   return;
};

transaction{
   a = lit 1:IntU8.U8;
   discard a;
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = call SomeFunctions.Identity[IntU8.U8](a);
   return;
};

transactional transaction{
  () = call BaseOps.CreateStuff();
};


transactional transaction{
   a = lit 1:IntU8.U8;
   aa = copy a;
   b = call BaseOps.Pack[IntU8.U8](aa);
   a2 = unpack b:BaseOps.Wrapper[IntU8.U8];
   () = call Helpers.AssertEqU8(a,a2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   aa = copy a;
   b = call BaseOps.Pack[IntU8.U8](aa);
   a2 = call BaseOps.Unpack[IntU8.U8](b);
   () = call Helpers.AssertEqU8(a,a2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   aa = copy a;
   b = pack BaseOps.Wrapper[IntU8.U8]#Ctr(aa);
   a2 = call BaseOps.Unpack[IntU8.U8](b);
   () = call Helpers.AssertEqU8(a,a2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   aa = copy a;
   b = pack BaseOps.Wrapper[IntU8.U8]#Ctr(aa);
   a2 = unpack b:BaseOps.Wrapper[IntU8.U8];
   () = call Helpers.AssertEqU8(a,a2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = lit -100:IntI128.I128;
   aa = copy a;
   bb = copy b;
   w = call BaseOps.Pack2[IntU8.U8,IntI128.I128](aa,bb);
   (a2,b2) = call BaseOps.Unpack2[IntU8.U8,IntI128.I128](w);
   () = call Helpers.AssertEqU8(a,a2);
   () = call Helpers.AssertEqI128(b,b2);
    return ();
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = lit -100:IntI128.I128;
   aa = copy a;
   bb = copy b;
   w = call BaseOps.Pack2[IntU8.U8,IntI128.I128](aa,bb);
   (a2,b2) = switch w:BaseOps.TwoOfTwo[IntU8.U8,IntI128.I128] {
        Ctr1(a,b) => {
            return (a,b);
        };
        Ctr2(b,a) => {
            return (a,b);
        };
   };
   () = call Helpers.AssertEqU8(a,a2);
   () = call Helpers.AssertEqI128(b,b2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = lit -100:IntI128.I128;
   aa = copy a;
   bb = copy b;
   w = call BaseOps.Pack2[IntU8.U8,IntI128.I128](aa,bb);
   (a2,b2) = call BaseOps.Unpack2[IntU8.U8,IntI128.I128](w);
   () = call Helpers.AssertEqU8(a,a2);
   () = call Helpers.AssertEqI128(b,b2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = lit -100:IntI128.I128;
   aa = copy a;
   bb = copy b;
   w = pack BaseOps.TwoOfTwo[IntU8.U8,IntI128.I128]#Ctr2(bb,aa);
   (a2,b2) = call BaseOps.Unpack2[IntU8.U8,IntI128.I128](w);
   () = call Helpers.AssertEqU8(a,a2);
   () = call Helpers.AssertEqI128(b,b2);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   b = lit -100:IntI128.I128;
   aa = copy a;
   bb = copy b;
   w = pack BaseOps.TwoOfTwo[IntU8.U8,IntI128.I128]#Ctr1(aa,bb);
   (a2,b2) = call BaseOps.Unpack2[IntU8.U8,IntI128.I128](w);
   () = call Helpers.AssertEqU8(a,a2);
   () = call Helpers.AssertEqI128(b,b2);
};






