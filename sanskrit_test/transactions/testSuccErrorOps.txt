transactional transaction{
   c = call ErrorOps.CatchOne();
   () = call Helpers.AssertTrue(c);
};

transaction:(log b:Bool.Bool){
   return call ErrorOps.CatchOne();
};

transactional transaction{
   c = call ErrorOps.CatchPropagate();
   () = call Helpers.AssertTrue(c);
};

transaction:(log b:Bool.Bool){
   return call ErrorOps.CatchPropagate();
};

transactional transaction{
   c = try call ErrorOps.Throw(){
      success => {
          return pack Bool.Bool#False();
      };
      failure => {
          return pack Bool.Bool#True();
      };
   };
   () = call Helpers.AssertTrue(c);
};

transaction:(log b:Bool.Bool){
   return try call ErrorOps.Throw(){
      success => {
          return pack Bool.Bool#False();
      };
      failure => {
          return pack Bool.Bool#True();
      };
   };
};

transactional transaction{
   c = try call ErrorOps.Propagate(){
      success => {
          return pack Bool.Bool#False();
      };
      failure => {
          return pack Bool.Bool#True();
      };
   };
   () = call Helpers.AssertTrue(c);
};

transaction:(log b:Bool.Bool){
   return try call ErrorOps.Propagate(){
      success => {
          return pack Bool.Bool#False();
      };
      failure => {
          return pack Bool.Bool#True();
      };
   };
};

transaction{
  return try call ErrorOps.NoThrow(){
        success => {
            return ();
        };
        failure => {
            return ();
        };
  };
};

transactional transaction{
  return call ErrorOps.NoThrow();
};