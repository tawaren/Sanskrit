transactional transaction{
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   c = lit 1:IntU8.U8;
   c2 = call BitOps.And(a,b);
   () = call Helpers.AssertEqU8(c,c2);
};

transaction:(log r:IntU8.U8){
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   return call BitOps.And(a,b);
};

transactional transaction{
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   c = lit 0x000000FF000000FF:Data.Data8;
   c2 = call BitOps.And2(a,b);
   () = call Helpers.AssertEqData8(c,c2);
};

transaction:(log r:Data.Data8){
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   return call BitOps.And2(a,b);
};

transactional transaction{
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   c = lit 7:IntU8.U8;
   c2 = call BitOps.Or(a,b);
   () = call Helpers.AssertEqU8(c,c2);
};

transaction:(log r:IntU8.U8){
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   return call BitOps.Or(a,b);
};

transactional transaction{
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   c = lit 0x00FFFFFF00FFFFFF:Data.Data8;
   c2 = call BitOps.Or2(a,b);
   () = call Helpers.AssertEqData8(c,c2);
};

transaction:(log r:Data.Data8){
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   return call BitOps.Or2(a,b);
};

transactional transaction{
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   c = lit 6:IntU8.U8;
   c2 = call BitOps.Xor(a,b);
   () = call Helpers.AssertEqU8(c,c2);
};

transaction:(log r:IntU8.U8){
   a = lit 5:IntU8.U8;
   b = lit 3:IntU8.U8;
   return call BitOps.Xor(a,b);
};

transactional transaction{
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   c = lit 0x00FFFF0000FFFF00:Data.Data8;
   c2 = call BitOps.Xor2(a,b);
   () = call Helpers.AssertEqData8(c,c2);
};

transaction:(log r:Data.Data8){
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   b = lit 0x0000FFFF0000FFFF:Data.Data8;
   return call BitOps.Xor2(a,b);
};

transactional transaction{
   a = lit 1:IntU8.U8;
   c = lit 254:IntU8.U8;
   c2 = call BitOps.Not(a);
   () = call Helpers.AssertEqU8(c,c2);
};

transaction:(log r:IntU8.U8){
   a = lit 1:IntU8.U8;
   return call BitOps.Not(a);
};

transactional transaction{
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   c = lit 0xFF00FF00FF00FF00:Data.Data8;
   c2 = call BitOps.Not2(a);
   () = call Helpers.AssertEqData8(c,c2);
};

transaction:(log r:Data.Data8){
   a = lit 0x00FF00FF00FF00FF:Data.Data8;
   return call BitOps.Not2(a);
};