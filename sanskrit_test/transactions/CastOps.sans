module CastOps {

    public fun Extend(a:IntU8.U8):(c:IntU128.U128) {
        c = call $Extend[IntU8.U8,IntU128.U128](a);
        return c;
    };

    public fun Extend2(a:IntI8.I8):(c:IntI128.I128) {
        c = call $Extend[IntI8.I8,IntI128.I128](a);
        return c;
    };

    public risky<Errors.Numeric> fun Cut(a:IntU16.U16):(c:IntU8.U8) {
        c = call $Cut[IntU16.U16,IntU8.U8](a);
        return c;
    };

    public risky<Errors.Numeric> fun Cut2(a:IntI16.I16):(c:IntI8.I8) {
        c = call $Cut[IntI16.I16,IntI8.I8](a);
        return c;
    };

    public fun ErrorCut(a:IntI16.I16):(r:Bool.Bool) {
        r = try {
            c = call $Cut[IntI16.I16,IntI8.I8](a);
            r = pack Bool.Bool#False();
            return r;
        } catch {
            Errors.Numeric => {
                r = pack Bool.Bool#True();
                return r;
            };
        };
        return r;
    };

    public risky<Errors.Numeric> fun SignCast(a:IntU8.U8):(c:IntI8.I8) {
        c = call $SignCast[IntU8.U8,IntI8.I8](a);
        return c;
    };

    public risky<Errors.Numeric> fun SignCast2(a:IntI8.I8):(c:IntU8.U8) {
        c = call $SignCast[IntI8.I8,IntU8.U8](a);
        return c;
    };

    public fun ErrorSignCast(a:IntU8.U8):(r:Bool.Bool) {
        r = try {
            c = call $SignCast[IntU8.U8,IntI8.I8](a);
            r = pack Bool.Bool#False();
            return r;
        } catch {
            Errors.Numeric => {
                r = pack Bool.Bool#True();
                return r;
            };
        };
        return r;
    };

    public fun ErrorSignCast2(a:IntI8.I8):(r:Bool.Bool) {
        r = try {
            c = call $SignCast[IntI8.I8,IntU8.U8](a);
            r = pack Bool.Bool#False();
            return r;
        } catch {
            Errors.Numeric => {
                r = pack Bool.Bool#True();
                return r;
            };
        };
        return r;
    };
}