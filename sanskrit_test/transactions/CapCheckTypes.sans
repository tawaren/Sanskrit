module CapCheckTypes {
    public type <Value, Unbound, Drop> PhantomDrop[phantom A]{ Ctr(); };

    public type <Value, Unbound, Drop> HasCopy[<Copy> A] { Ctr(); };
    public type <Value, Unbound, Drop> HasDrop[<Drop> A] { Ctr(); };
    public type <Value, Unbound, Drop> HasPersist[<Persist> A] { Ctr(); };

    public type <Copy> IsCopy { Ctr(); };
    public type <Drop> IsDrop { Ctr(); };
    public type <Persist> IsPersist { Ctr(); };

    public type <Value, Unbound, Persist, Drop> AllRecExceptCopy{ Ctr(); };
    public type <Value, Unbound, Persist, Copy> AllRecExceptDrop{ Ctr(); };
    public type <Value, Unbound, Copy, Drop> AllRecExceptPersist{ Ctr(); };

    public type <Value, Unbound, Copy> MayCopy[A]{ Ctr(A); };
    public type <Value, Unbound, Drop> MayDrop[A]{ Ctr(A); };
    public type <Value, Unbound, Persist> MayPersist[A]{ Ctr(A); };
}