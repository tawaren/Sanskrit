module TestFailBranchReturnType10 {
    type Enum {
        Z;
        A;
        B;
    };

    private fun Test[<Copy> A,<Copy> B](consume a:A, consume b:B, consume e:.Enum):(a3:A, b3:A){
        (a3,b3,c3) = switch e:.Enum {
            Z() => {
                  a2 = copy a;
                  b2 = copy b;
                  c2 = &a2;
                  return (a2,b2,c2);
            };
            A() => {
                  a2 = copy a;
                  b2 = copy b;
                  c2 = &a2;
                  return (a2,b2,c2);
            };
            B() => {
                a2 = copy a;
                b2 = copy b;
                c2 = &b2;
                return (a2,b2,c2);
            };
        };

         return (a3, b3);
    };
}