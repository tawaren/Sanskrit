module TestSucAdt {
    type <Embed> Phantom;

    type <Copy, Drop, Persist, Embed, Consume, Inspect> Wrapper[<Embed> X] {
        Ctr(X);
    };

    type <Embed> Wrapper2[<Embed> X] {
        Ctr(X);
    };

    type <Embed> Enum {
        A;
        B;
        C;
        D;
        E;
    };

    type <Embed, Consume, Inspect, Create> Option[<Embed> T] {
        Some(T);
        None;
    };

    type <Embed> Alternative[<Embed> A,<Embed> B] {
        A(A);
        B(B);
    };


    type <Copy, Drop, Persist, Embed> Test[<Embed> A, <Embed> B] {
           Ctr1($alt2[A,B]);
           Ctr2($tuple2[A,B]);
           Ctr3(A);
           Ctr4(B);
           Ctr5(.Wrapper[A]);
           Ctr6($alt2[$tuple2[B,.Wrapper[A]],$tuple2[A,.Wrapper[B]]]);
    };

    type <Embed> Struct {
        Ctr(.Wrapper[.Enum],.Enum, .Option[.Phantom], .Alternative[.Enum,.Phantom], .Test[.Enum,.Phantom]);
    };

    type <Embed> HasRecs[<Copy, Drop, Persist> T];

    type <Embed, Copy, Drop, Persist> WithRec;

    type <Embed> HasRecTest{
           Ctr(.HasRecs[.Test[.WithRec,.WithRec]]);
    };
}