module TestSucTypeCheck{

   fun TestFun[<Unbound> A](consume a:A):(b:A, c:IntU8.U8){
     b = a;
     c = lit 1 :IntU8.U8;
     return (b,c);
   };

   fun TestFun2[<Drop> A](consume a:A, consume b:TestSucValidate.Drop1):(){
        discard (a,b);
        return;
   };

   fun TestFun3[<Drop> A](consume a:A, consume b:TestSucValidate.Drop1):(){
        a2 = a;
        b2 = b;
        discard(a2,b2);
        return;
   };

   fun TestFun5[<Copy, Value, Unbound>  A](a:A,  b:TestSucValidate.DropCopy):(a2:A, b2:TestSucValidate.DropCopy){
       a2 = copy a;
       b2 = copy b;
       return (a2,b2);
   };

   fun TestFun7[<Value, Unbound> A](consume a:TestSucAdt.Wrapper[A]):(b:A){
        return unpack a:TestSucAdt.Wrapper[A];
   };

   fun TestFun71[A](consume a:%TestSucAdt.Wrapper[A]):(b:%A){
        return unpack a:%TestSucAdt.Wrapper[A];
   };

   fun TestFun72[A](consume a:TestSucAdt.Wrapper[%A]):(b:%A){
        return unpack a:TestSucAdt.Wrapper[%A];
   };


   fun TestFun73[A](a:TestSucAdt.Wrapper[%A]):(c:%%A){
        b = project a:%TestSucAdt.Wrapper[%A];
        c = unpack b:%TestSucAdt.Wrapper[%A];
        return c;
   };

   fun TestFun74[A](consume a:%TestSucAdt.Wrapper[A]):(c:%%A){
       b = field[0] a:%TestSucAdt.Wrapper[A];
       c = project b:%%A;
       return c;
   };

   fun TestFun75[A](consume a:%TestSucAdt.Wrapper[A]):(b:%A){
        return field[0] a:%TestSucAdt.Wrapper[A];
   };

   fun TestFun76[A](a:A):(b:%A){
        return project a:%A;
   };

   fun TestFun77[A](a:A):(c:%%A){
        b = project a:%A;
        c = project b:%%A;
        return c;
   };


   fun TestFun10[<Drop, Value, Unbound> A](consume a:TestSucAdt.Option[A], consume b:A):(c:A){
       return switch a:TestSucAdt.Option[A] {
            None() => {
                return b;
            };
            Some(d) => {
                discard b;
                return d;
            };
       };
   };

   fun TestFun101[<Drop> A](consume a:%TestSucAdt.Option[A], consume b:%A):(c:%A){
      return switch a:%TestSucAdt.Option[A] {
           None() => {
               return b;
           };
           Some(d) => {
               discard b;
               return d;
           };
      };
   };

   fun TestFun102[<Drop> A](consume a:TestSucAdt.Option[%A], consume b:%A):(c:%A){
     return switch a:TestSucAdt.Option[%A] {
          None() => {
              return b;
          };
          Some(d) => {
              discard b;
              return d;
          };
     };
   };

   fun TestFun103[<Drop, Copy, Value, Unbound> A](a:TestSucAdt.Option[A], consume b:A):(c:A){
      return inspect a:TestSucAdt.Option[A] {
           None() => {
               return b;
           };
           Some(d) => {
               discard b;
               e = copy d;
               return e;
           };
      };
   };

   fun TestFun104[<Drop, Copy, Value, Unbound> A](consume a:TestSucAdt.Option[A], consume b:A):(c:A){
      c = inspect a:TestSucAdt.Option[A] {
           None() => {
               return b;
           };
           Some(d) => {
               discard b;
               e = copy d;
               return e;
           };
      };
      discard a;
      return c;
   };

   fun TestFun13[<Value, Unbound> A](consume a:A):(b:TestSucAdt.Option[A]){
        return pack TestSucAdt.Option[A]#Some(a);
   };

   type <Unbound> Pair[A, B] {
      Ctr(A,B);
   };

   fun TestFun15[<Value, Unbound> A, <Value, Unbound> B](consume a:A, consume b:B):(c:.Pair[A,B]){
       return pack .Pair[A,B]#Ctr(a,b);
   };

   fun TestFun20[<Value, Unbound> A, <Value, Unbound> B](consume a:A, consume b:B):(c:.Pair[A,B]){
        return call .TestFun15[A,B](a,b);
   };
}
