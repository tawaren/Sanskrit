system module System {

   public(create) top type <Copy,Drop,Value,Unbound> Entry[<Persist> T]{
        Ctr(Ids.PrivateId,T);
   };

   top type <Drop,Value,Unbound> Context{
          Ctr(Ids.PrivateId, Data.Data20, IntU64.U64, IntU8.U8, IntU8.U8, IntU64.U64);
   };

   public fun TxId(ctx:.Context):(txtHash:Ids.PublicId) {
        txtId = copy field[0] ctx:.Context;
        txtPub = call Ids.privateToPublic(txtId);
        return txtPub;
   };

   public fun BundleHash(ctx:.Context):(fullHash:Data.Data20) {
        bundleHash = copy field[1] ctx:.Context;
        return bundleHash;
   };

   public fun BlockNo(ctx:.Context):(blockNo:IntU64.U64) {
        blockNo = copy field[2] ctx:.Context;
        return blockNo;
   };

   public transactional fun UniqueID(consume ctx:.Context):(id:Ids.PrivateId, ctx:.Context) {
         (txtId, bundleHash, blockNo, sectionNo, txNo, ctr) = unpack ctx:.Context;
         ctrData = call IntU64.toData(ctr);
         id = call Ids.derivePrivateId8(txtId,ctrData);
         inc = lit 1:IntU64.U64;
         newCtr = call IntU64.add(ctr,inc);
         newCtx = pack .Context#Ctr(txtId, bundleHash, blockNo, sectionNo, txNo, newCtr);
         return (id,newCtx);
   };

   protected[T] fun UnpackEntry[<Unbound, Value, Persist> T](consume entry:.Entry[T]):(id:Ids.PrivateId, t:T){
        (id, t) = unpack entry:.Entry[T];
        return (id,t);
   };

}