module TestSucValidate {
    public(consume) type TestType;

    type TestType2[A,B,C];
    type TestType3[A];
    type Holder[A,B] {
        A(.TestType2[B,A,IntU8.U8]);
        B(.TestType3[A]);
    };

    type TestType4[A,phantom B];
    type Holder2[A,phantom B] {
        A(.TestType4[A,B]);
        B(.TestType4[IntU8.U8,IntU16.U16]);
        C(.TestType4[A,A]);
    };

    public(consume) type TestType5[<Drop> A, <Drop,Copy> B, <Drop,Copy> C, <Drop,Copy> D];
    public(consume) type Holder3[<Drop> A, <Drop,Copy> B, <Drop,Copy> C, <Drop,Copy> D] {
        A(.TestType5[D,D,D,D]);
        B(.TestType5[C,C,C,D]);
        C(.TestType5[B,B,C,D]);
        D(.TestType5[A,B,C,D]);
        P(.TestType5[IntU8.U8,IntU16.U16,C,D]);
    };

    type Holder4[A,phantom B] {
        A(A);
    };

    type <Drop, Copy, Persist, Value, Unbound>  DropCopyPersist{
        A();
    };

    type <Drop, Copy, Persist, Value, Unbound>  DropCopyPersist2[A] {
        A(.DropCopyPersist, A);
    };

    type <Drop, Copy, Value, Unbound>  DropCopy {
        A(.DropCopyPersist, .DropCopyPersist2[.DropCopyPersist]);
    };

    type <Drop, Copy, Value, Unbound>  DropCopy2[A] {
        A(.DropCopy, .DropCopyPersist, .DropCopyPersist2[.DropCopyPersist], A);
    };

    type <Drop, Value, Unbound>  Drop1 {
        A(.DropCopy, .DropCopy2[.DropCopy], .DropCopyPersist, .DropCopyPersist2[.DropCopyPersist]);
    };

    type <Drop, Value, Unbound>  Drop2[A] {
        A(.Drop1, .DropCopy, .DropCopy2[.DropCopy], .DropCopyPersist, .DropCopyPersist2[.DropCopyPersist], A);
    };

    type None {
        A(.Drop1, .Drop2[.Drop1], .DropCopy, .DropCopy2[.DropCopy], .DropCopyPersist, .DropCopyPersist2[.DropCopyPersist]);
    };

    type None2[A] {
        A(.None, .Drop1, .Drop2[.Drop1], .DropCopy, .DropCopy2[.DropCopy], .DropCopyPersist, .DropCopyPersist2[.DropCopyPersist], A);
    };

    fun TestFun[A]():(){
        return;
    };

    fun TestFun2[A,B,C]():(){
        return;
    };

    fun Caller[A,B]():() {
        () = call .TestFun[A]();
        () = call .TestFun2[B,A,IntU8.U8]();
        return;
    };

    fun TestFun3[A,phantom B]():(){
        return;
    };

    fun Caller2[A,phantom B]():() {
        return call .TestFun3[A,B]();
    };

    fun Caller3[A]():() {
        return call .TestFun3[A,A]();
    };

    fun Caller4():() {
        return call .TestFun3[IntU8.U8,IntU8.U8]();
    };

    fun TestFun4[<Drop> A, <Drop,Copy> B, <Drop,Copy> C, <Drop,Copy> D]():(){
        return;
    };

    fun Caller5[<Drop> A, <Drop,Copy> B, <Drop,Copy> C, <Drop,Copy> D]():() {
        () = call .TestFun4[D,D,D,D]();
        () = call .TestFun4[C,C,C,D]();
        () = call .TestFun4[B,B,C,D]();
        () = call .TestFun4[A,B,C,D]();
        () = call .TestFun4[IntU8.U8,IntU16.U16,C,D]();
        return;
    };

    protected[T] fun TestFun5[T]():() {
        return;
    };

    fun Caller6():(){
        return call .TestFun5[.TestType]();
    };

    public fun Caller7():(){
        return call .TestFun5[.TestType]();
    };

    fun TestFun6[<Value, Unbound> A, phantom B](consume a:A):(b:A){
        return a;
    };
}