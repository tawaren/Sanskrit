module TestSucLinearity{

  fun TestFun1[<Value, Unbound> A](consume a:A):(d:A) {
    b = a;
    c = b;
    d = c;
    return d;
  };

  fun TestFun6[<Value, Unbound> A](consume a:A):(b:A) {
          return a;
  };

  fun TestFun7[<Value, Unbound> A](consume a:A):(c:A) {
        return let  {
            return a;
        };
  };

  type Enum { A; B; C; };

  fun TestFun10[<Value, Unbound> A](consume a:A, consume e:.Enum):(c:A) {
        return switch e:.Enum  {
           A() => {
                return a;
           };
           B() => {
               return a;
           };
           C() => {
              return a;
           };
        };
  };

  fun TestFun101[<Value, Unbound> A](consume a:A, e:.Enum):(c:A) {
        return inspect e:.Enum  {
           A() => {
                return a;
           };
           B() => {
               return a;
           };
           C() => {
              return a;
           };
        };
  };

  fun TestFun12[<Drop> A](consume a:A):() {
          b = a;
          return;
  };

  fun TestFun13[<Drop> A](consume a:A):() {
        return let  {
            b = a;
            return;
        };
  };

  fun TestFun13[<Drop> A](consume a:A, consume e:.Enum):() {
        return switch e:.Enum  {
           A() => {
                b = a;
                return;
           };
           B() => {
               b = a;
               return;
           };
           C() => {
              b = a;
              return;
           };
        };
  };

  fun TestFun131[<Drop> A](consume a:A, e:.Enum):() {
          return inspect e:.Enum  {
             A() => {
                  b = a;
                  return;
             };
             B() => {
                 b = a;
                 return;
             };
             C() => {
                b = a;
                return;
             };
          };
  };

  fun TestFun16[<Value, Unbound> A](consume a:A, consume b:A):(c:A, d:A) {
          return (a,b);
  };

  fun TestFun17[<Value, Unbound> A](consume a:A, consume b:A):(c:A, d:A) {
        return let  {
           return (a,b);
        };
  };

  fun TestFun20[<Value, Unbound> A](consume a:A, consume b:A, consume e:.Enum):(c:A, d:A) {
        return switch e:.Enum  {
           A() => {
                return (a,b);
           };
           B() => {
               return (a,b);
           };
           C() => {
              return (a,b);
           };
        };
  };

  fun TestFun201[<Value, Unbound> A](consume a:A, consume b:A, e:.Enum):(c:A, d:A) {
          return inspect e:.Enum  {
             A() => {
                 return (a,b);
             };
             B() => {
                 return (a,b);
             };
             C() => {
                return (a,b);
             };
          };
  };

  fun TestFun22[<Drop, Value, Unbound> A](consume a:A, consume b:A):(c:A) {
          d = b;
          return a;
  };

  fun TestFun23[<Drop, Value, Unbound> A](consume a:A, consume b:A):(c:A) {
        return let  {
           d = b;
           return a;
        };
  };

  fun TestFun26[<Drop, Value, Unbound>  A](consume a:A, consume b:A, consume e:.Enum):(c:A) {
        return switch e:.Enum  {
           A() => {
               d = b;
               return a;
           };
           B() => {
               d = b;
               return a;
           };
           C() => {
               d = b;
               return a;
           };
        };
  };

  fun TestFun261[<Drop, Value, Unbound>  A](consume a:A, consume b:A, e:.Enum):(c:A) {
          return inspect e:.Enum  {
             A() => {
                 d = b;
                 return a;
             };
             B() => {
                 d = b;
                 return a;
             };
             C() => {
                 d = b;
                 return a;
             };
          };
    };

}
