module TestSucBorrowCreateOpenAdts {

    public fun CreateWrapper[<Embed> T](t:T):(borrowed(t) res: TestSucOpenAdt.Wrapper[T]) {
        w = &pack TestSucOpenAdt.Wrapper[T]#Ctr(t);
        return w;
    };

    public fun CreateImageWrapper[<Embed> T](t:%T):(borrowed(t) res: %TestSucOpenAdt.Wrapper[T]) {
        w = &pack %TestSucOpenAdt.Wrapper[T]#Ctr(t);
        return w;
    };

    public fun CreateWrapperImage[<Embed> T](t:%T):(borrowed(t) res: TestSucOpenAdt.Wrapper[%T]) {
        w = &pack TestSucOpenAdt.Wrapper[%T]#Ctr(t);
        return w;
    };

    public fun CreateSome[<Embed> T](t:T):(borrowed(t) res: TestSucOpenAdt.Option[T]) {
        some = &pack TestSucOpenAdt.Option[T]#Some(t);
        return some;
    };

    public fun CreateAltA[<Embed> A,<Embed> B](a:A):(borrowed(a) res: TestSucOpenAdt.Alternative[A,B]) {
        a = &pack TestSucOpenAdt.Alternative[A,B]#A(a);
        return a;
    };

    public fun CreateAltB[<Embed> A,<Embed> B](b:B):(borrowed(b) res: TestSucOpenAdt.Alternative[A,B]) {
        b = &pack TestSucOpenAdt.Alternative[A,B]#B(b);
        return b;
    };

    fun CreateStuffReturn():(a: TestSucOpenAdt.Enum, b:TestSucOpenAdt.Enum, c:TestSucOpenAdt.Enum) {
       e = pack TestSucOpenAdt.Enum#A();
       e2 = pack TestSucOpenAdt.Enum#B();
       e3 = pack TestSucOpenAdt.Enum#C();
       w = call .CreateWrapper[TestSucOpenAdt.Enum](e);
       w2 = call .CreateWrapper[TestSucOpenAdt.Enum](e2);
       some = call .CreateSome[TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w);
       a = call .CreateAltA[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](e3);
       b = call .CreateAltB[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w2);
       return (e,e2,e3);
    };

    fun CreateStuffLetRet():(a: TestSucOpenAdt.Enum, b:TestSucOpenAdt.Enum, c:TestSucOpenAdt.Enum) {
       e = pack TestSucOpenAdt.Enum#A();
       e2 = pack TestSucOpenAdt.Enum#B();
       e3 = pack TestSucOpenAdt.Enum#C();
       let {
           w = call .CreateWrapper[TestSucOpenAdt.Enum](e);
           w2 = call .CreateWrapper[TestSucOpenAdt.Enum](e2);
           some = call .CreateSome[TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w);
           a = call .CreateAltA[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](e3);
           b = call .CreateAltB[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w2);
           return;
       };
       return (e,e2,e3);
    };

    fun CreateStuffLetDrop():() {
       e = pack TestSucOpenAdt.Enum#A();
       e2 = pack TestSucOpenAdt.Enum#B();
       e3 = pack TestSucOpenAdt.Enum#C();
       let {
           w = call .CreateWrapper[TestSucOpenAdt.Enum](e);
           w2 = call .CreateWrapper[TestSucOpenAdt.Enum](e2);
           some = call .CreateSome[TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w);
           a = call .CreateAltA[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](e3);
           b = call .CreateAltB[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w2);
           return;
       };
       drop e;
       drop e2;
       drop e3;
       return;
    };

    fun CreateStuffFreeDrop():() {
       e = pack TestSucOpenAdt.Enum#A();
       e2 = pack TestSucOpenAdt.Enum#B();
       e3 = pack TestSucOpenAdt.Enum#C();
       w = call .CreateWrapper[TestSucOpenAdt.Enum](e);
       w2 = call .CreateWrapper[TestSucOpenAdt.Enum](e2);
       some = call .CreateSome[TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w);
       a = call .CreateAltA[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](e3);
       b = call .CreateAltB[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w2);
       free b;
       free a;
       free some;
       free w2;
       free w;
       drop e;
       drop e2;
       drop e3;
       return;
    };

    fun CreateStuffDiscard():() {
           e = pack TestSucOpenAdt.Enum#A();
           e2 = pack TestSucOpenAdt.Enum#B();
           e3 = pack TestSucOpenAdt.Enum#C();
           w = call .CreateWrapper[TestSucOpenAdt.Enum](e);
           w2 = call .CreateWrapper[TestSucOpenAdt.Enum](e2);
           some = call .CreateSome[TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w);
           a = call .CreateAltA[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](e3);
           b = call .CreateAltB[TestSucOpenAdt.Enum,TestSucOpenAdt.Wrapper[TestSucOpenAdt.Enum]](w2);
           discard (e,e2,e3);
           return;
    };
}