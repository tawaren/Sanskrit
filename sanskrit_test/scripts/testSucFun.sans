module TestSucFun {
    type <Copy, Value, Unbound>  DummyForProtected;

    private fun Test[<Value, Unbound> A](consume a:A):(a:A){
        return a;
    };

    private fun TestEmptyPriv():(){
        return;
    };

    protected[A] fun TestEmptyProt[A]():(){
        return;
    };

    protected[A] fun TestProt[<Unbound> A](consume a:A):(a:A){
        return a;
    };

    fun CopyTest[<Copy, Value, Unbound> A](a:A):(a:A){
        b = copy a;
        return call .Test[A](b);
    };

    fun CopyProtTest(a:.DummyForProtected):(a:.DummyForProtected){
            b = copy a;
            return call .TestProt[.DummyForProtected](b);
    };
}