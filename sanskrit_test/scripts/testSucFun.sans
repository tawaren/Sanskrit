module TestSucFun {
    type <Copy> DummyForProtected;

    private fun Test[A](consume a:A):(a:A){
        b = a;
        return b;
    };

    private fun TestEmptyPriv():(){
        return;
    };

    protected[A] fun TestEmptyProt[A]():(){
        return;
    };

    protected[A] fun TestProt[A](consume a:A):(a:A){
        b = a;
        return b;
    };

    fun CopyTest[<Copy> A](a:A):(a:A){
        b = copy a;
        c = call .Test[A](b);
        return c;
    };

    fun CopyProtTest(a:.DummyForProtected):(a:.DummyForProtected){
            b = copy a;
            c = call .TestProt[.DummyForProtected](b);
            return c;
    };

    protected[A] fun CopyProtTest2[<Copy> A](a:A):(a:A){
        b = copy a;
        c = call .TestProt[A](b);
        return c;
    };

    err X;

    risky <.X> fun ThrowTest[A](a:A):(a:A){
        throw .X;
    };
}