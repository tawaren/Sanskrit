Module { byte_size: Some(698), meta: LargeVec([116, 101, 115, 116, 115, 117, 99, 99, 114, 101, 97, 116, 101, 99, 108, 111, 115, 101, 100, 97, 100, 116, 115]), data: [DataComponent { byte_size: Some(14), create_scope: Local, consume_scope: Local, inspect_scope: Local, top: false, provided_caps: CapSet(48), generics: [Physical(CapSet(0))], import: PublicImport { modules: [], types: [] }, body: Internal { constructors: [Case { fields: [TypeRef(0)] }] } }, DataComponent { byte_size: Some(15), create_scope: Local, consume_scope: Local, inspect_scope: Local, top: false, provided_caps: CapSet(48), generics: [], import: PublicImport { modules: [], types: [] }, body: Internal { constructors: [Case { fields: [] }, Case { fields: [] }, Case { fields: [] }, Case { fields: [] }, Case { fields: [] }] } }, DataComponent { byte_size: Some(15), create_scope: Local, consume_scope: Local, inspect_scope: Local, top: false, provided_caps: CapSet(48), generics: [Physical(CapSet(0))], import: PublicImport { modules: [], types: [] }, body: Internal { constructors: [Case { fields: [TypeRef(0)] }, Case { fields: [] }] } }, DataComponent { byte_size: Some(18), create_scope: Local, consume_scope: Local, inspect_scope: Local, top: false, provided_caps: CapSet(48), generics: [Physical(CapSet(0)), Physical(CapSet(0))], import: PublicImport { modules: [], types: [] }, body: Internal { constructors: [Case { fields: [TypeRef(0)] }, Case { fields: [TypeRef(1)] }] } }], sigs: [], data_sig_order: BitSerializedVec([true, true, true, true]), functions: [FunctionComponent { byte_size: Some(26), scope: Global, shared: FunSigShared { transactional: false, generics: [], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 1 }, applies: [] }] }, params: [], returns: [TypeRef(0)] }, body: Internal { byte_size: Some(13), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(0))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [])])) } }, FunctionComponent { byte_size: Some(26), scope: Global, shared: FunSigShared { transactional: false, generics: [], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 1 }, applies: [] }] }, params: [], returns: [TypeRef(0)] }, body: Internal { byte_size: Some(13), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(0))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(1), [])])) } }, FunctionComponent { byte_size: Some(33), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(32))], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 0 }, applies: [TypeRef(0)] }] }, params: [Param { consumes: true, typ: TypeRef(0) }], returns: [TypeRef(1)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(1))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(37), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(16))], import: PublicImport { modules: [], types: [Projection { typ: TypeRef(0) }, Data { link: DataLink { module: ModRef(0), offset: 0 }, applies: [TypeRef(0)] }, Projection { typ: TypeRef(2) }] }, params: [Param { consumes: true, typ: TypeRef(1) }], returns: [TypeRef(3)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(3))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(35), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(16))], import: PublicImport { modules: [], types: [Projection { typ: TypeRef(0) }, Data { link: DataLink { module: ModRef(0), offset: 0 }, applies: [TypeRef(1)] }] }, params: [Param { consumes: true, typ: TypeRef(1) }], returns: [TypeRef(2)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(2))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(29), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(48))], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 2 }, applies: [TypeRef(0)] }] }, params: [], returns: [TypeRef(1)] }, body: Internal { byte_size: Some(13), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(1))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(1), [])])) } }, FunctionComponent { byte_size: Some(33), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(48))], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 2 }, applies: [TypeRef(0)] }] }, params: [Param { consumes: true, typ: TypeRef(0) }], returns: [TypeRef(1)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(1))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(36), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(48)), Physical(CapSet(48))], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 3 }, applies: [TypeRef(0), TypeRef(1)] }] }, params: [Param { consumes: true, typ: TypeRef(0) }], returns: [TypeRef(2)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(2))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(0), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(36), scope: Global, shared: FunSigShared { transactional: false, generics: [Physical(CapSet(48)), Physical(CapSet(48))], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 3 }, applies: [TypeRef(0), TypeRef(1)] }] }, params: [Param { consumes: true, typ: TypeRef(1) }], returns: [TypeRef(2)] }, body: Internal { byte_size: Some(15), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(1), TypeRef(2))] }, code: Exp(LargeVec([Pack(PermRef(0), Tag(1), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(48), scope: Local, shared: FunSigShared { transactional: false, generics: [], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 1 }, applies: [] }] }, params: [Param { consumes: true, typ: TypeRef(0) }], returns: [] }, body: Internal { byte_size: Some(34), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [], permissions: [Type(PermSet(2), TypeRef(0))] }, code: Exp(LargeVec([Switch(ValueRef(0), PermRef(0), [Exp(LargeVec([Return([])])), Exp(LargeVec([Return([])])), Exp(LargeVec([Return([])])), Exp(LargeVec([Return([])])), Exp(LargeVec([Return([])]))])])) } }, FunctionComponent { byte_size: Some(44), scope: Local, shared: FunSigShared { transactional: false, generics: [], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 1 }, applies: [] }, Data { link: DataLink { module: ModRef(0), offset: 0 }, applies: [TypeRef(0)] }] }, params: [Param { consumes: true, typ: TypeRef(1) }], returns: [] }, body: Internal { byte_size: Some(25), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [Function { link: FuncLink { module: ModRef(0), offset: 9 }, applies: [] }], permissions: [Type(PermSet(2), TypeRef(1)), Callable(PermSet(8), CallRef(0))] }, code: Exp(LargeVec([Unpack(ValueRef(0), PermRef(0)), Invoke(PermRef(1), [ValueRef(0)])])) } }, FunctionComponent { byte_size: Some(217), scope: Local, shared: FunSigShared { transactional: false, generics: [], import: PublicImport { modules: [], types: [Data { link: DataLink { module: ModRef(0), offset: 1 }, applies: [] }, Data { link: DataLink { module: ModRef(0), offset: 0 }, applies: [TypeRef(0)] }, Data { link: DataLink { module: ModRef(0), offset: 2 }, applies: [TypeRef(1)] }, Data { link: DataLink { module: ModRef(0), offset: 3 }, applies: [TypeRef(0), TypeRef(1)] }] }, params: [], returns: [] }, body: Internal { byte_size: Some(189), imports: BodyImport { public: PublicImport { modules: [], types: [] }, callables: [Function { link: FuncLink { module: ModRef(0), offset: 0 }, applies: [] }, Function { link: FuncLink { module: ModRef(0), offset: 1 }, applies: [] }, Function { link: FuncLink { module: ModRef(0), offset: 2 }, applies: [TypeRef(0)] }, Function { link: FuncLink { module: ModRef(0), offset: 5 }, applies: [TypeRef(1)] }, Function { link: FuncLink { module: ModRef(0), offset: 6 }, applies: [TypeRef(1)] }, Function { link: FuncLink { module: ModRef(0), offset: 7 }, applies: [TypeRef(0), TypeRef(1)] }, Function { link: FuncLink { module: ModRef(0), offset: 8 }, applies: [TypeRef(0), TypeRef(1)] }, Function { link: FuncLink { module: ModRef(0), offset: 10 }, applies: [] }, Function { link: FuncLink { module: ModRef(0), offset: 9 }, applies: [] }], permissions: [Callable(PermSet(8), CallRef(0)), Callable(PermSet(8), CallRef(1)), Callable(PermSet(8), CallRef(2)), Callable(PermSet(8), CallRef(3)), Callable(PermSet(8), CallRef(4)), Callable(PermSet(8), CallRef(5)), Callable(PermSet(8), CallRef(6)), Type(PermSet(2), TypeRef(2)), Callable(PermSet(8), CallRef(7)), Type(PermSet(2), TypeRef(3)), Callable(PermSet(8), CallRef(8))] }, code: Exp(LargeVec([Invoke(PermRef(0), []), Invoke(PermRef(0), []), Invoke(PermRef(1), []), Invoke(PermRef(2), [ValueRef(2)]), Invoke(PermRef(2), [ValueRef(1)]), Invoke(PermRef(3), []), Invoke(PermRef(4), [ValueRef(2)]), Invoke(PermRef(5), [ValueRef(5)]), Invoke(PermRef(6), [ValueRef(3)]), Switch(ValueRef(3), PermRef(7), [Exp(LargeVec([Invoke(PermRef(8), [ValueRef(0)])])), Exp(LargeVec([Return([])]))]), Switch(ValueRef(2), PermRef(7), [Exp(LargeVec([Invoke(PermRef(8), [ValueRef(0)])])), Exp(LargeVec([Return([])]))]), Switch(ValueRef(1), PermRef(9), [Exp(LargeVec([Invoke(PermRef(10), [ValueRef(0)])])), Exp(LargeVec([Invoke(PermRef(8), [ValueRef(0)])]))]), Switch(ValueRef(0), PermRef(9), [Exp(LargeVec([Invoke(PermRef(10), [ValueRef(0)])])), Exp(LargeVec([Invoke(PermRef(8), [ValueRef(0)])]))])])) } }], implements: [], fun_impl_order: BitSerializedVec([true, true, true, true, true, true, true, true, true, true, true, true]) }