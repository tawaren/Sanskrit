module TestSucCreateClosedAdts {

        type <Value, Unbound> Wrapper[X] {
            Ctr(X);
        };

        type <Value, Unbound> Enum {
            A;
            B;
            C;
            D;
            E;
        };

        type <Value, Unbound> Option[T] {
            Some(T);
            None;
        };

        type <Value, Unbound> Alternative[A,B] {
            A(A);
            B(B);
        };

        public fun CreateEnumA():(res: .Enum) {
            return pack .Enum#A();
        };

        public fun CreateEnumB():(res: .Enum) {
            return pack .Enum#B();
        };

        public fun CreateWrapper[<Unbound> T](consume t:T):(res: .Wrapper[T]) {
            return pack .Wrapper[T]#Ctr(t);
        };

        public fun CreateImageWrapper[T](consume t:%T):(res: %.Wrapper[T]) {
            return pack %.Wrapper[T]#Ctr(t);
        };

        public fun CreateWrapperImage[T](consume t:%T):(res: .Wrapper[%T]) {
            return pack .Wrapper[%T]#Ctr(t);
        };


        public fun CreateNone[<Value, Unbound> T]():(res: .Option[T]) {
            return pack .Option[T]#None();
        };

        public fun CreateSome[<Value, Unbound> T](consume t:T):(res: .Option[T]) {
            return pack .Option[T]#Some(t);
        };

        public fun CreateAltA[<Value, Unbound> A,<Value, Unbound> B](consume a:A):(res: .Alternative[A,B]) {
            return pack .Alternative[A,B]#A(a);
        };

        public fun CreateAltB[<Value, Unbound> A,<Value, Unbound> B](consume b:B):(res: .Alternative[A,B]) {
            return pack .Alternative[A,B]#B(b);
        };

        private fun DropEnum(consume enum:.Enum):() {
            return switch enum : .Enum {
                A => {return;};
                B => {return;};
                C => {return;};
                D => {return;};
                E => {return;};
            };
        };

        private fun DropWrapper(consume wrap:.Wrapper[.Enum]):() {
            enum = unpack wrap : .Wrapper[.Enum];
            return call .DropEnum(enum);
        };

        fun CreateStuffConsume():() {
           e = call .CreateEnumA();
           e2 = call .CreateEnumA();
           e3 = call .CreateEnumB();
           w = call .CreateWrapper[.Enum](e);
           w2 = call .CreateWrapper[.Enum](e3);
           none = call .CreateNone[.Wrapper[.Enum]]();
           some = call .CreateSome[.Wrapper[.Enum]](w);
           a = call .CreateAltA[.Enum,.Wrapper[.Enum]](e2);
           b = call .CreateAltB[.Enum,.Wrapper[.Enum]](w2);

           () = switch none :  .Option[.Wrapper[.Enum]] {
                None => {return;};
                Some(wrap) => {
                     return call .DropWrapper(wrap);
                };
           };

           () = switch some :  .Option[.Wrapper[.Enum]] {
               None => {return;};
               Some(wrap) => {
                    return call .DropWrapper(wrap);
               };
           };

           () = switch a : .Alternative[.Enum,.Wrapper[.Enum]] {
                A(enum) => {
                   return call .DropEnum(enum);
                };
                B(wrap) => {
                     return call .DropWrapper(wrap);
                };
           };

           return switch b : .Alternative[.Enum,.Wrapper[.Enum]] {
                A(enum) => {
                   return call .DropEnum(enum);
                };
                B(wrap) => {
                     return call .DropWrapper(wrap);
                };
           };
        };

}