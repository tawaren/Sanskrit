module IntI64 {
   public extType(8) <Copy,Drop,Persist,Primitive,Value,Unbound> I64;

   public extFun eq(num1:.I64, num2:.I64):(res:Bool.Bool);
   public extFun lt(num1:.I64, num2:.I64):(res:Bool.Bool);
   public extFun lte(num1:.I64, num2:.I64):(res:Bool.Bool);
   public extFun gt(num1:.I64, num2:.I64):(res:Bool.Bool);
   public extFun gte(num1:.I64, num2:.I64):(res:Bool.Bool);

   public transactional extFun add(num1:.I64, num2:.I64):(res:.I64);
   public transactional extFun sub(num1:.I64, num2:.I64):(res:.I64);
   public transactional extFun div(num1:.I64, num2:.I64):(res:.I64);
   public transactional extFun mul(num1:.I64, num2:.I64):(res:.I64);

   public extFun and(num1:.I64, num2:.I64):(res:.I64);
   public extFun or(num1:.I64, num2:.I64):(res:.I64);
   public extFun xor(num1:.I64, num2:.I64):(res:.I64);
   public extFun not(num1:.I64):(res:.I64);

   public extFun toData(num:.I64):(res:Data.Data8);
   public extFun fromData(data:Data.Data8):(res:.I64);

   public extFun hash(num:.I64):(res:Data.Data20);


}